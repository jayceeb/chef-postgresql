# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# our settings
chef_json = {
  postgresql: {
    password: {
      postgres: "howdy"
    },
    version: 9.3,
    config: {
      # this seems to be required off for now
      ssl: false,
      archive_mode: false
    },
    streaming: {
      master_host: "192.168.7.10"
    },
    pg_hba: [
      {type: 'local', db: 'all', user: 'postgres', addr: nil, method: 'ident'},
      {type: 'local', db: 'all', user: 'all', addr: nil, method: 'ident'},
      {type: 'host', db: 'all', user: 'all', addr: '127.0.0.1/32', method: 'md5'},
      {type: 'host', db: 'all', user: 'all', addr: '::1/128', method: 'md5'},
      {type: 'host', db: 'all', user: 'all', addr: '192.168.7.0/24', method: 'trust'},
    ]
    wal_e: {
      aws_access_key: 'ACCESS',
      aws_secret_key: 'SECRET',
      s3_bucket:      'BUCKET'
    }
  }
}

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "precise64"
  config.vm.network "public_network"
  #config.berkshelf.enabled = true

  # this is not really needed, but archiving locally is weird
  config.vm.synced_folder "pgdata/", "/share/psql", mount_options: %w(dmode=777 fmode=666)

  # define our psql master
  config.vm.define :master do |conf|
    conf.vm.host_name = "pgsql-master"
    conf.vm.network 'private_network', ip: "192.168.7.10"
    conf.vm.provider :virtualbox do |vb|
      vb.memory= 2048
      vb.cpus= 2
    end
    config.vm.provision :chef_solo do |chef|
      chef.cookbooks_path = "../my-recipes/cookbooks"
      chef.roles_path = "../my-recipes/roles"
      chef.add_recipe( "postgresql::server_streaming_master" )
      chef.add_recipe( "postgresql::wal-e" )
      json = chef_json.dup
      json[:postgresql][:pg_hba] << {type: 'host', db: 'replication', user: 'all', addr: '192.168.7.31/30', method: 'trust'}
      chef.json = json
    end
  end

  # define our slaves, two for now
  # more requires a larger netmask in the section above, 
  # plus more senders on the master
  { slave0: 30, slave1: 31 }.each do |slave,ip|
    config.vm.define slave do |conf|
      conf.vm.host_name = "pgsql-#{slave}"
      conf.vm.network 'private_network', ip: "192.168.7.#{ip}"
      conf.vm.provider :virtualbox do |vb|
        vb.memory= 1024
      end
      config.vm.provision :chef_solo do |chef|
        chef.cookbooks_path = "../my-recipes/cookbooks"
        chef.roles_path = "../my-recipes/roles"
        chef.add_recipe( "postgresql::server_streaming_slave" )
        chef.json = chef_json
      end
    end
  end
end
